
atlantisUrl: "http://atlantis.workquark.net"

# -- Replace this with your own repo allowlist.
orgAllowlist: "defyjoy"


# Check values.yaml for examples.
# github: {}
github:
  user: defyjoy
  token: bar
  secret: baz
  hostname: github.com

# -- If using a GitHub App, please enter your values as follows.
# The chart will perform the base64 encoding for you for values that are stored in secrets.
# installationId is necessary when there are multiple installs of the Github App.
# Check values.yaml for examples.
githubApp: {}
# githubApp:
#   id: 123456
#   installationId: 1
#   slug: foo
#   key: |
#     -----BEGIN PRIVATE KEY-----
#     ...
#     -----END PRIVATE KEY-----
#   secret: baz



vcsSecretName: ""

# -- Override atlantis main configuration by config map,
# ref: https://www.runatlantis.io/docs/using-slack-hooks.html#configuring-atlantis.
# Check values.yaml for examples.
config: ""
# config: |
#   ---
#   webhooks:
#     - event: apply
#       workspace-regex: .*
#       branch-regex: .*
#       kind: slack
#       channel: my-channel

# -- Use Server Side Repo Config,
# ref: https://www.runatlantis.io/docs/server-side-repo-config.html.
# Check values.yaml for examples.
# repoConfig: ""
# Example with default configuration:
repoConfig: |
  ---
  repos:
  - id: /.*/
    apply_requirements: []
    workflow: default
    allowed_overrides: []
    allow_custom_workflows: false
  workflows:
    default:
      plan:
        steps: [init, plan]
      apply:
        steps: [apply]
  metrics:
    prometheus:
      endpoint: /metrics


# -- If managing secrets outside the chart for the Basic Auth secret, use this variable to reference the secret name.
basicAuthSecretName: ""

# -- Optionally specify an API secret to enable the API.
# Check values.yaml for examples.
api: {}
# api:
#   secret: "s3cr3t"

# -- If managing secrets outside the chart for the API secret, use this variable to reference the secret name. The key containing the secret must be called 'apisecret'.
apiSecretName: ""

# -- Override the command field of the Atlantis container.
command: []

# -- Common Labels for all resources created by this chart.
commonLabels: {}

ingress:
  enabled: true
  ingressClassName:
  apiVersion: ""
  labels: {}
  # -- Check values.yaml for examples.
  annotations: {}
  # annotations:
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: "true"
  # -- Use / for nginx.
  path: /*
  # --  Used when several paths under the same host, with different backend services, are required.
  # Check values.yaml for examples.
  paths: []
  #    - path: "/path1"
  #      service: test1
  #      port:
  #    - path: "/path2"
  #      service: test2
  #      port:
  pathType: ImplementationSpecific
  host: ""
  # -- Used when several hosts are required.
  # Check values.yaml for examples.
  hosts: []
  #   - host: chart-example.local
  #     paths: ["/"]
  #     service: chart-example1
  #   - host: chart-example.local2
  #     service: chart-example1
  #     paths: ["/lala"]
  # -- Check values.yaml for examples.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

webhook_ingress:
  # -- When true creates a secondary webhook.
  enabled: false
  ingressClassName:
  apiVersion: ""
  # -- Check values.yaml for examples.
  annotations: {}
  # annotations:
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: "true"
  # -- Use / for nginx.
  path: /*
  # --  Used when several paths under the same host, with different backend services, are required.
  # Check values.yaml for examples.
  paths: []
  #    - path: "/path1"
  #      service: test1
  #      port:
  #    - path: "/path2"
  #      service: test2
  #      port:
  pathType: ImplementationSpecific
  host: ""
  # -- Used when several hosts are required.
  # Check values.yaml for examples.
  hosts: []
  #   - host: chart-example.local
  #     paths: ["/"]
  #     service: chart-example1
  #   - host: chart-example.local2
  #     service: chart-example1
  #     paths: ["/lala"]
  # -- TLS configuration.
  # Check values.yaml for examples.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  labels: {}

# -- Allows to override the /etc/ssl/certs/ca-certificates.cer with your custom one.
# You have to create a secret with the specified name.
customPem: ""

# -- Resources for Atlantis.
# Check values.yaml for examples.
resources: {}
# resources:
#   requests:
#     memory: 1Gi
#     cpu: 100m
#   limits:
#     memory: 1Gi
#     cpu: 100m

# -- Path to the data directory for the volumeMount.
atlantisDataDirectory: /atlantis-data

volumeClaim:
  enabled: true
  # -- Disk space available to check out repositories.
  dataStorage: 5Gi
  # -- Storage class name (if possible, use a resizable one).
  storageClassName: ""
  accessModes: ["ReadWriteOnce"]

# -- DEPRECATED - Disk space available to check out repositories.
# Example: 5Gi.
dataStorage: ""
# -- DEPRECATED - Storage class name for Atlantis disk.
storageClassName: ""

# -- Replica count for Atlantis pods.
replicaCount: 1

test:
  # -- Enables test container.
  enabled: true
  image: bats/bats
  imageTag: 1.9.0
  annotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

# -- You can use topology spread constraints to control how Pods are spread across your cluster among failure-domains such as regions,
# zones, nodes, and other user-defined topology domains. (requires Kubernetes >= 1.19).
# Check values.yaml for examples.
topologySpreadConstraints: []
#  - labelSelector:
#      matchLabels:
#        app.kubernetes.io/name: aws-example-cluster
#    maxSkew: 1
#    topologyKey: topology.kubernetes.io/zone
#    whenUnsatisfiable: DoNotSchedule

serviceAccount:
  # -- Specifies whether a ServiceAccount should be created.
  create: true
  # -- Set the `automountServiceAccountToken` field on the pod template spec.
  # -- If false, no kubernetes service account token will be mounted to the pod.
  mount: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: null
  # -- Annotations for the Service Account.
  # Check values.yaml for examples.
  annotations: {}
  # annotations:
  #   annotation1: value
  #   annotation2: value
  # IRSA example:
  # annotations:
  #   eks.amazonaws.com/role-arn: role-arn

# -- Optionally deploy rbac to allow for the serviceAccount to manage terraform state via the kubernetes backend.
enableKubernetesBackend: false

# -- TLS Secret Name for Atlantis pod.
tlsSecretName: ""

# -- Additional path (`:` separated) that will be appended to the system `PATH` environment variable.
extraPath: ""

# -- Environment values to add to the Atlantis pod.
# Check values.yaml for examples.
environment: {}
# environment:
#   ATLANTIS_DEFAULT_TF_VERSION: v1.2.9

# -- Optionally specify additional environment variables to be populated from Kubernetes secrets.
# Useful for passing in TF_VAR_foo or other secret environment variables from Kubernetes secrets.
# Check values.yaml for examples.
environmentSecrets: []
# environmentSecrets:
#   - name: THE_ENV_VAR
#     secretKeyRef:
#       name: the_k8s_secret_name
#       key: the_key_of_the_value_in_the_secret

# -- Optionally specify additional environment variables in raw yaml format.
# Useful to specify variables refering to k8s objects.
# Check values.yaml for examples.
environmentRaw: []
# environmentRaw:
#   - name: POD_IP
#     valueFrom:
#       fieldRef:
#         fieldPath: status.podIP

# -- Optionally specify additional Kubernetes secrets to load environment variables from.
# All key-value pairs within these secrets will be set as environment variables.
# Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
# For example, providing ATLANTIS_GH_USER here and defining a value for github.user will result in the github.user value being used.
# Check values.yaml for examples.
loadEnvFromSecrets: []
# loadEnvFromSecrets:
#   - secret_one
#   - secret_two

# -- Optionally specify additional Kubernetes ConfigMaps to load environment variables from.
# All key-value pairs within these ConfigMaps will be set as environment variables.
# Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
# For example, providing ATLANTIS_ALLOW_FORK_PRS here and defining a value for allowForkPRs will result in the allowForkPRs value being used.
# Check values.yaml for examples.
loadEnvFromConfigMaps: []
# loadEnvFromConfigMaps:
#   - config_one
#   - config_two

# -- Optionally specify google service account credentials as Kubernetes secrets. If you are using the terraform google provider you can specify the credentials as "${file("/var/secrets/some-secret-name/key.json")}".
# Check values.yaml for examples.
googleServiceAccountSecrets: []
# googleServiceAccountSecrets:
#   - name: some-secret-name
#     secretName: the_k8s_secret_name

# -- Optionally specify additional volumes for the pod.
# Check values.yaml for examples.
extraVolumes: []
# extraVolumes:
#   - name: some-volume-name
#     emptyDir: {}

# -- Optionally specify additional volume mounts for the container.
# Check values.yaml for examples.
extraVolumeMounts: []
# extraVolumeMounts:
#   - name: some-volume-name
#     mountPath: /path/in/container

# -- Optionally specify additional manifests to be created.
# Check values.yaml for examples.
extraManifests: []
# extraManifests:
#  - apiVersion: cloud.google.com/v1beta1
#    kind: BackendConfig
#    metadata:
#      name: "{{ .Release.Name }}-test"
#    spec:
#      securityPolicy:
#        name: "gcp-cloud-armor-policy-test"

# -- Optionally specify init containers manifests to be added to the Atlantis pod.
# Check values.yaml for examples.
initContainers: []
# initContainers:
# - name: example
#   image: alpine:latest
#   command: ['sh', '-c', 'echo The init container is running! && sleep 10']

initConfig:
  # -- Install providers/plugins into a path shared with the Atlantis pod.
  enabled: false
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  # -- SharedDir is set as env var INIT_SHARED_DIR.
  sharedDir: /plugins
  sharedDirReadOnly: true
  workDir: /tmp
  # -- Size for the shared volume.
  sizeLimit: 300Mi
  # -- Security context for the container.
  containerSecurityContext: {}
  # -- Script to run on the init container.
  # @default -- Check values.yaml.
  script: |
    #!/bin/sh
    set -eoux pipefail

    # example for terragrunt
    TG_VERSION="v0.67.5"
    TG_SHA256_SUM="4e5ae67854a774be6419f7215733990b481662375dc0bd5f2eda05211a692cf0"
    TG_FILE="${INIT_SHARED_DIR}/terragrunt"
    wget https://github.com/gruntwork-io/terragrunt/releases/download/${TG_VERSION}/terragrunt_linux_amd64 -O "${TG_FILE}"
    echo "${TG_SHA256_SUM}  ${TG_FILE}" | sha256sum -c
    chmod 755 "${TG_FILE}"
    terragrunt -v

    # example for terragrunt-atlantis-config
    TAC_VERSION="1.18.0" # without v
    TAC_SHA256_SUM="59178dcd3e426abf4b5d8fcb1ac8dbdea548a04aa64eaf39be200484a5e6f2ca"
    TAC_FILE="${INIT_SHARED_DIR}/terragrunt-atlantis-config"
    wget "https://github.com/transcend-io/terragrunt-atlantis-config/releases/download/v${TAC_VERSION}/terragrunt-atlantis-config_${TAC_VERSION}_linux_amd64"
    echo "${TAC_SHA256_SUM}  terragrunt-atlantis-config_${TAC_VERSION}_linux_amd64" | sha256sum -c
    cp -fv "terragrunt-atlantis-config_${TAC_VERSION}_linux_amd64" "${TAC_FILE}"
    chmod 755 "${TAC_FILE}"
    terragrunt-atlantis-config version

# -- Optionally specify hostAliases for the Atlantis pod.
# Check values.yaml for examples.
hostAliases: []
# hostAliases:
#   - hostnames:
#     - aaa.com
#     - test.ccc.com
#     ip: 10.0.0.0
#   - hostnames:
#     - bbb.com
#     ip: 10.0.0.2

# -- Optionally specify dnsPolicy parameter to specify a DNS policy for a pod
# Check https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
dnsPolicy: "ClusterFirst"

# -- Optionally specify dnsConfig for the Atlantis pod.
# Check values.yaml for examples.
dnsConfig: {}
# dnsConfig:
#  nameservers:
#    - 8.8.8.8
#  searches:
#    - mydomain.com

hostNetwork: false

secret:
  # -- Annotations for the Secrets.
  # Check values.yaml for examples.
  annotations: {}
  # annotations:
  #   annotation1: value
  #   annotation2: value

# -- These annotations will be added to all the resources.
# Check values.yaml for examples.
extraAnnotations: {}
# extraAnnotations:
#   team: example

# -- Optionally specify extra arguments for the Atlantis pod.
# Check values.yaml for examples.
extraArgs: []
# extraArgs:
#   - --disable-autoplan
#   - --disable-repo-locking

# -- Optionally specify extra containers for the Atlantis pod.
# Check values.yaml for examples.
extraContainers: []
# extraContainers:
#   - name: <container name>
#     args:
#       - ...
#     image: <docker images>
#     imagePullPolicy: IfNotPresent
#     resources:
#       limits:
#         memory: 128Mi
#       requests:
#         cpu: 100m
#         memory: 128Mi
#     volumeMounts:
#       - ...

# -- Check values.yaml for examples.
containerSecurityContext: {}
# containerSecurityContext:
#   allowPrivilegeEscalation: false
#   readOnlyRootFilesystem: true

servicemonitor:
  # -- To enable a Prometheus servicemonitor, set enabled to true,
  #   and enable the metrics in this file's repoConfig
  #   by setting a value for metrics.prometheus.endpoint.
  enabled: false
  interval: "30s"
  path: /metrics
  # -- Prometheus ServiceMonitor labels.
  additionalLabels: {}
  auth:
    # -- If auth is enabled on Atlantis, use one of the following mechanism.
    basicAuth:
      # -- Authentication from the secret generated with the basicAuth values
      #   this will reference the username and password keys
      #   from the atlantis-basic-auth secret.
      enabled: false
    externalSecret:
      # -- Authentication based on an external secret
      enabled: false
      name: ""
      # -- Check values.yaml for examples.
      keys: {}
      # keys:
      #   username: USERNAME
      #   password: ATLANTIS_WEB_PASSWORD
  # -- Optional metric relabelings to drop or modify metrics.
  metricRelabelings: []
  # metricRelabelings:
  #   - action: drop
  #     regex: "atlantis_project_apply_execution_.*"
  #     sourceLabels: [__name__]

# -- Enable this if you're using Google Managed Prometheus.
podMonitor:
  enabled: false
  interval: "30s"

# -- Set the desired Locking DB type
# Accepts boltdb or redis.
lockingDbType: ""

# -- Configure Redis Locking DB.
# lockingDbType value must be redis for the config to take effect.
# Check values.yaml for examples.
redis: {}
# redis:
#   host: redis.host.name
#   password: myRedisPassword
#   port: 6379
#   db: 0
#   tlsEnabled: false
#   insecureSkipVerify: false

# -- When managing secrets outside the chart for the Redis secret, use this variable to reference the secret name.
redisSecretName: ""

# -- Key within the existing Redis secret that contains the password value.
redisSecretPasswordKey: password

# -- (int) Optionally customize the termination grace period in seconds.
# @default -- default depends on the kubernetes version.
terminationGracePeriodSeconds:
# terminationGracePeriodSeconds: 300

# -- Set lifecycle hooks.
# https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/.
lifecycle: {}
# lifecycle:
#   preStop:
#     exec:
#       command:
#         - /bin/sh
#         - -c
#         - while pgrep -x "terraform|tofu|terragrunt" > /dev/null; do sleep 1; done
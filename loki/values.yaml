loki:
  deploymentMode: Distributed
  loki:
    auth_enabled: true
    schemaConfig:
      configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
    # storage_config:
    #   aws:
    #     s3: http://minioadmin:minioadmin@minio.:9000/loki
    #     # bucketnames: "loki-s3-dev-chunks"
    #     # region: <S3 BUCKET REGION> # for example, eu-west-2  
    #     # access_key_id: xPoQt2tzu98K51L6VYkj
    #     # secret_access_key: pMBcMCEsZAuWdD7Dk9LqGbK1xDotA9pNGvCpQccC
    #     region: "" #leave it empty
    #     s3forcepathstyle: false
    #     http_config:
    #       idle_conn_timeout: 90s
    #       response_header_timeout: 0s
    #       insecure_skip_verify: false
    ingester:
      chunk_encoding: snappy
    pattern_ingester:
      enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
      retention_period: 672h # 28 days retention
    compactor:
      retention_enabled: true
      delete_request_store: s3
    ruler:
    enable_api: true
    # storage:
    #   type: s3
    #   s3:
    #     # region: <S3 BUCKET REGION> # for example, eu-west-2
    #     bucketnames:
    #       chunks: loki-aws-dev-ruler # Your actual S3 bucket name, for example, loki-aws-dev-ruler
    #     s3forcepathstyle: false
    #   # alertmanager_url: http://prom:9093 # The URL of the Alertmanager to send alerts (Prometheus, Mimir, etc.)

    querier:
      max_concurrent: 4

    storage:
      type: s3
      # bucketNames:
      #   chunks: loki-s3-dev-chunks # Your actual S3 bucket name (loki-aws-dev-chunks)
      #   ruler: loki-aws-dev-ruler # Your actual S3 bucket name (loki-aws-dev-ruler)
      #   # admin: "<Insert s3 bucket name>" # Your actual S3 bucket name (loki-aws-dev-admin) - GEL customers only
      # s3:
      #   # s3: null
      #   endpoint: minio.172.18.0.0.nip.io
      #   # region: null
      #   secretAccessKey: pMBcMCEsZAuWdD7Dk9LqGbK1xDotA9pNGvCpQccC
      #   accessKeyId: xPoQt2tzu98K51L6VYkj
      #   # signatureVersion: null
      #   # s3ForcePathStyle: false
      #   insecure: true
      #   http_config: {}
      #   # -- Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config
      #   backoff_config: {}
      #   disable_dualstack: false
  test:
    enabled: false
  serviceAccount:
    create: true
  #  annotations:
  #    "eks.amazonaws.com/role-arn": "arn:aws:iam::<Account ID>:role/LokiServiceAccountRole" # The service role you created


  ingester:
    replicas: 3
    zoneAwareReplication:
      enabled: false

  querier:
    replicas: 3
    maxUnavailable: 2

  queryFrontend:
    replicas: 2
    maxUnavailable: 1

  queryScheduler:
    replicas: 2

  distributor:
    replicas: 3
    maxUnavailable: 2
  compactor:
    replicas: 0

  indexGateway:
    replicas: 2
    maxUnavailable: 1

  ruler:
    replicas: 1
    maxUnavailable: 1

  # This exposes the Loki gateway so it can be written to and queried externaly
  gateway:
    service:
      type: ClusterIP
    enabled: true
    ingress:
      # -- Specifies whether an ingress for the gateway should be created
      enabled: true
      ingressClassName: nginx
      hosts:
      - host: loki-gateway.172.18.0.0.nip.io
        paths:
        - path: /
          pathType: Prefix
          # -- pathType (e.g. ImplementationSpecific, Prefix, .. etc.) might also be required by some Ingress Controllers
          # -- TLS configuration for the gateway ingress. Hosts passed through the `tpl` function to allow templating
      tls: []
        # - secretName: loki-gateway-tls
        #   hosts:
        #     - gateway.loki.example.com
    basicAuth:
      enabled: true
      existingSecret: loki-basic-auth

  # Since we are using basic auth, we need to pass the username and password to the canary
  lokiCanary:
    enabled: false
    # lokiurl: loki.172.18.0.0.nip.io
    # lokiurl: loki-gateway
    extraArgs:
    - -pass=$(LOKI_PASS)
    - -user=$(LOKI_USER)
    extraEnv:
    - name: LOKI_PASS
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: password
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: username

  # Enable minio for storage
  minio:
    enabled: true

  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  singleBinary:
    replicas: 0
